import tierra.*

// Punto 1
// Integrante 1
describe "Tests para el arma baculo" {

  const guerrero = object {var property vida = 100 method tienePocaVida() = vida <10  } 

  test "Baculo para un guerrero con mucha vida" {
    assert.equals(250, baculo.unidadesDePoder(guerrero))
  }

  test "Baculo para un guerrero con poca vida tiene tope" {
    guerrero.vida(5)
    assert.equals(400,baculo.unidadesDePoder(guerrero))
  }

  test "Baculo con poder base de 100 y guerrero de poca vida " {
    guerrero.vida(5)
    baculo.poderBase(100)
    assert.equals(200, baculo.unidadesDePoder(guerrero))
  }
}

// Integrante 2

describe "tests para el arma espada" {

  const guerrero = object {var property vida = 100} 
  test "Poder de una espada élfica para cualquier guerrero" {
    assert.equals(250, espada.unidadesDePoder(guerrero))
  }

  test "Poder de una espada enana para un guerrero con 100 de vida" {
    espada.magiaQueRige(magiaEnana)
    assert.equals(500, espada.unidadesDePoder(guerrero))
  }
}

// Integrante 3
describe "Punto 1 - Grupo de tests para el arma flecha de bronze" {

  const guerrero = object {}

  test "Flecha de bronze lustrada recientemente" {

    calendario.fecha(new Date(year=2024, month=01, day=05))
    flechaDeBronce.fechaDeLustrado(new Date(year=2024, month=01, day=01))

    assert.equals(96, flechaDeBronce.unidadesDePoder(guerrero))

  }

  test "Flecha de bronze lustrada hace mucho" {

    calendario.fecha(new Date(year=2024, month=09, day=05))
    flechaDeBronce.fechaDeLustrado(new Date(year=2024, month=01, day=01))

    assert.equals(0, flechaDeBronce.unidadesDePoder(guerrero))

  }

}

// Grupal

describe "tests de Gandalf" {

  test "gandalf con mucha vida " {
    
    const baculo = object { method unidadesDePoder(guerrero) = 100 }
    const otroBaculo = object { method unidadesDePoder(guerrero) = 150 }

    gandalf.armas([baculo,otroBaculo])

    assert.equals(2000, gandalf.nivelDePoder())

  }

  test "Gandalf con poca vida" {
    
    const baculo = object { method unidadesDePoder(guerrero)  = 100 }
    const otroBaculo = object { method unidadesDePoder(guerrero) = 150  }

    gandalf.vida(5)
    gandalf.armas([baculo,otroBaculo])

    assert.equals(1500, gandalf.nivelDePoder())

  }

}


describe "tests de cajaDeFlecha" {
  
  const guerrero = object {}

  test "flecha de alumnino" {
    assert.equals(50, flechaDeAluminio.unidadesDePoder(guerrero))
  }

  test "flecha de hierro sin oxidar" {
    assert.equals(70, flechaDeHierro.unidadesDePoder(guerrero))
  }
  
  test "caja de flechas 3 tipos de flechas"{
    calendario.fecha(new Date(year=2024, month=01, day=05))
    flechaDeBronce.fechaDeLustrado(new Date(year=2024, month=01, day=01))

    cajaDeFlechas.flechasQueContiene([flechaDeAluminio,flechaDeHierro,flechaDeBronce])
    assert.equals(83, cajaDeFlechas.unidadesDePoder(guerrero))
  }
}
// Punto 2 

// Integrante 1
describe "Tests para la zona de Lebennin" {

 

  test "Gandalf pasa Lebennin" {
    lebennin.pasaZona(gandalf)
    assert.equals(100,gandalf.vida())
  }

  test "Guerrero con mucho poder puede pasar Lebennin" {
    const guerrero = object {var property vida = 100 method nivelDePoder() = 3000 }
    assert.that(lebennin.puedePasar(guerrero))
  }

  test "Guerrero con poco poder no pasa Lebennin"{
    const guerrero = object {var property vida = 100 method nivelDePoder() = 100 }
    assert.notThat(lebennin.puedePasar(guerrero))
  }
}

// Integrante 2

describe "Test para Minas Tirith" {

  const guerreroArmado = object { method cantidadDeArmas() = 5 } 
 
  test "Un personaje armado puede pasar Minas Tirith" {
    assert.that(minasTirith.puedePasar(guerreroArmado))
  }

  const guerreroDesarmado = object { method cantidadDeArmas() = 0 }
  test "Un personaje desarmado no puede pasar Minas Tirith" {
    assert.notThat(minasTirith.puedePasar(guerreroDesarmado))
  }

  //const gandalfArmado = object { var property armas = [baculo,espada] var property vacunacionAlDia = false var property vida = 100 method cantidadDeArmas() = armas.size()}
  test "Gandalf de 100 unidades de vida , con baculo y espada pasa por Minas Tirith y finaliza en 80 de vida" {
    gandalf.armas([baculo,espada])
    minasTirith.pasarZona(gandalf)
    assert.equals(80,gandalf.vida())
  }
}

// Integrante 3

describe "Test para Lossarnach" {
 
  test "Gandalf puede pasar por Lossarnach" {
    assert.that(lossarnach.puedePasar(gandalf))
  }

  test "Gandalf de 100 unidades de vida, con baculo y espada pasa por Lossarnach" {
    gandalf.armas([baculo, espada])
    lossarnach.pasarZona(gandalf)
    assert.equals(104,gandalf.vida())
  }
}


describe "camino de gondor" {
  
  test "gandalf puede pasar por gondor" {
    gandalf.armas([baculo,espada])
    assert.that(caminoDeGondor.puedePasar(gandalf))
  }

  test "gandalf pasa por gondor y sufre consecuencias"{
    gandalf.armas([baculo,espada])
    caminoDeGondor.pasarZona(gandalf)
    assert.equals(80,gandalf.vida())
  }

}


describe "test de Tom Bombadil" {
  test "tom pasa por lebennin" {
    assert.that(lebennin.puedePasar(tomBombadil))
  }

  test "tom pasa por el camino de Gondor"{
    caminoDeGondor.pasarZona(tomBombadil)
    assert.equals(100,tomBombadil.vida())
  }
  
} 


// Parte 2

// Arsenal

// Parte 2

// Integrante 1

describe "Tests de diferentes Espadas" {
    var espadaElfica 
    var espadaEnana 
    var espadaHumana
    var guerrero

    method initialize(){
      espadaElfica = new Espada (multiplicadorDePoder=10,magiaQueRige=magiaElfica)
      espadaEnana =  new Espada (multiplicadorDePoder=10,magiaQueRige=magiaEnana)
      magiaHumana.fraccionQueOtorga(60)
      espadaHumana = new Espada (multiplicadorDePoder=10,magiaQueRige=magiaHumana)
      guerrero = object {var property vida=100}
    }
  test "Espada elfica y multiplicador de poder 10" {
    assert.equals(250,espadaElfica.unidadesDePoder(guerrero))
  }

  test "Espada enana y multiplicador de poder 10"{
    assert.equals(500,espadaEnana.unidadesDePoder(guerrero))
  }

  test "Espada humana con fracción del 60% y multiplicador de poder 10"{
    assert.equals(600,espadaHumana.unidadesDePoder(guerrero))
  }
}

describe "Tests Para diferentes Dagas" {
  var dagaElfica
  var guerrero

  method initialize(){
    dagaElfica = new Daga(multiplicadorDePoder=10,magiaQueRige=magiaElfica)
    guerrero = object {var property vida=100}
  }
  test "Daga elfica con un multiplicador de poder de 10" {
    assert.equals(125, dagaElfica.unidadesDePoder(guerrero))
  }
}

// Integrante 2

describe "Tests de Arcos" {
    var arco 
    var guerrero
    method initialize(){
      arco = new Arco (longitud = 10)
      guerrero = object {}

    }
  test "Poder de arco con 10 de longitud y Tension 40kg" {
    assert.equals(40,arco.unidadesDePoder(guerrero))
  }

}

describe "Tests de Ballestas" {
    var ballesta
    var guerrero

    method initialize(){
      ballesta = new Ballesta (longitud = 10)
      guerrero = object {method cantidadDeArmas() = 5 var property vida = 100}
    }
  test "Poder de ballesta para guerrero con 5 armas" {
    assert.equals(48,ballesta.unidadesDePoder(guerrero))
  }

}


// Integrante 3

describe "Tests de Hachas" {

  var guerrero
  var hachaRuberoica
  var hachaLuduenica
  var hachaNolan

  method initialize() {

    guerrero = object {}

    hachaRuberoica = new Hacha (
      poderBase=10,
      tipoDeMango=new MaderaRuberoica(
        multiplicador=6
      )
    )

    hachaLuduenica = new Hacha (
      poderBase=10,
      tipoDeMango=new MaderaLuduenica(
        multiplicador=6
      )
    )

    hachaNolan = new Hacha (
      poderBase=10,
      tipoDeMango=maderaNolan
    )
  }

  test "Poder de hacha con mango de madera Ruberoica" {
    assert.equals(15, hachaRuberoica.unidadesDePoder(guerrero))
  }

  test "Poder de hacha con mango de madera Luduenica" {
    assert.equals(25, hachaLuduenica.unidadesDePoder(guerrero))
  }

  test "Poder de hacha con mango de madera Nolan" {
    assert.equals(45, hachaNolan.unidadesDePoder(guerrero))
  }
}

// Razas

// Integrante 1 

describe "Tests de Raza Hobbit" {
  //const frodo = new Hobbit (vida=60,armas=[new Espada(multiplicadorDePoder=10,magiaQueRige=magiaElfica)])
  
  test "Frodo con 60 de vida y una espada elfica con multiplicador de 10" {
    assert.equals(560,frodo.nivelDePoder())
  }
}

describe "Tests de Raza Elfo"{
  //const legolas = new Elfo (vida=80,armas=[new Arco(longitud=110),new Espada(multiplicadorDePoder=12,magiaQueRige=magiaElfica)],posilloMagico=2000)
  test "Legolas con un posillo magico de 2000"{
    assert.equals(1000,legolas.nivelDePoder())
  }
}

// Integrante 2

describe "Tests de Raza Enano"{
  //const gimli = new Enanos (vida=70,factorDePoder=3,armas=[new Daga(magiaQueRige=magiaElfica,multiplicadorDePoder=10)])
  test "Enano con 70 de vida equipado con daga elfica"{
    assert.equals(138,gimli.nivelDePoder())
  }
}

// Integrante 3

describe "Tests de Raza Hombre" {
  test "Humano con 60 de vida equipado con una espada elfica y una ballesta de largo 10" {
    assert.equals(1084.80, aragorn.nivelDePoder())
  }
}

// Caminos 

describe "Tests de Zonas " {
  test "Frodo quiere pasar por el Bosque de Fangorn" {
    assert.that(bosqueDeFangorn.puedePasar(frodo))
  }

  test "Frodo sufre las consecuencias del bosque" {
    bosqueDeFangorn.aplicarConsecuencias(frodo)
    assert.equals(50,frodo.vida())
  }
}

describe "Tests de Camino de Rohan" {
  test "Gimli no puede pasar por Rohan" {
    assert.throwsExceptionWithMessage("Falta poder para pasar este camino",{rohan.pasarCamino(gimli)})
  }
}

// Entrega 3

// Integrante 1 - Matias
describe "Test de Enfrentamientos" {

    const atacante = new Raza(vida = 100)
    const enemigo = new Raza(vida = 100)
  test "Ambos guerrero tienen vida y se producen daño" {
    atacante.enfrentarA(enemigo)
    assert.that(atacante.vida()<100)
    assert.that(enemigo.vida()<100)
  }

  test "Si un guerro no tiene vida no se produce enfrentamiento"{
    atacante.vida(0)
    atacante.enfrentarA(enemigo)
    assert.equals(100,enemigo.vida())
  }

  test "Un guerrero con vida produce daño"{
    atacante.vida(100)
    assert.that(atacante.producirDanio()>0)
  }

  test "Un guerrero sin vida no produce daño" {
    atacante.vida(0)
    assert.equals(0,atacante.producirDanio())
  }

}


describe "Tests de Tacticas"{

    const guerreroAgil = new Humano (vida = 100,armas = [new Daga (multiplicadorDePoder=2,magiaQueRige=magiaElfica)])

    const guerreroResistente = new Humano(vida =100, armas=[new Espada(multiplicadorDePoder=1,magiaQueRige=magiaElfica)],tactica = tacticaDeResistencia)

    const guerreroCaruso = new Humano(vida =100, armas=[new Espada(multiplicadorDePoder=1,magiaQueRige=magiaElfica)],tactica = new TacticaCaruso(umbralDeEnergia=200))

    const guerreroCuatroTresTres = new Humano(vida =100, armas=[new Espada(multiplicadorDePoder=1,magiaQueRige=magiaElfica)],tactica = tacticaCuatroTresTres)

  test "Una tactica agil suma 100 al poder de un guerrero" { 
    assert.equals(guerreroAgil.producirDanio(),(guerreroAgil.nivelDePoder()+100)*0.1)
  }

  /*test "Guerrero agil ataca primero a otro guerrero y este devuelve el ataque"{
    guerreroAgil.enfrentarA(guerreroCaruso)
    assert.equals(74,guerreroCaruso.vida())
    assert.equals(86.86,guerreroAgil.vida())
  }*/

  test "Un guerrero con tactica de resistencia sufre la mitad del ataque"{
    guerreroResistente.enfrentarA(guerreroAgil)
    assert.equals(87,guerreroResistente.vida())
  }

  test "Un guerrero con las tacticas de caruso recibe daño al huir de un enemigo que supero su umbral "{
    const guerrero = object inherits Humano(vida=100){override method nivelDePoder()=300}
    guerreroCaruso.enfrentarA(guerrero)
    assert.equals(90, guerreroCaruso.vida())
  }

    test "Un guerrero con las tacticas de caruso se enfrenta a un enemigo que no supero el umbral "{
    guerreroCaruso.enfrentarA(guerreroAgil)
    assert.equals(84, guerreroAgil.vida()) // El guerrero que empezo el enfrentamiento ataca primero 
    assert.equals(75.76,guerreroCaruso.vida()) // El guerrero defensor ataca despues y al perder vida produce menos daño
  }

  test "Un guerrero que usa la tactica CuatroTresTres produce el doble de daño"{
     guerreroCuatroTresTres.enfrentarA(guerreroAgil)
     assert.equals(68, guerreroAgil.vida())
  }

    test "Un guerrero que usa la tactica CuatroTresTres y mas de 60 de vida, evade el ataque "{
     guerreroCuatroTresTres.enfrentarA(guerreroAgil)
     assert.equals(100, guerreroCuatroTresTres.vida())
  }
}

describe "Test de Anillos" {

    const legolas = new Elfo(vida=70,armas=[new Daga(magiaQueRige=magiaElfica,multiplicadorDePoder=10)], tactica=tacticaCuatroTresTres)
    const pipin = new Hobbit(vida=60,armas=[new Espada(magiaQueRige=magiaElfica,multiplicadorDePoder=10)], tactica=tacticaAgil)
    const thorin = new Enanos(vida=50,armas=[new Espada(magiaQueRige=magiaElfica,multiplicadorDePoder=10)], factorDePoder=1, tactica=tacticaDeResistencia)

    
    test "Anillo de Fuego" {
      const anilloDeFuego = new AnilloDeFuego(duenio=pipin,archienemigo=legolas)
      anilloDeFuego.invocarAnillo()
      assert.equals(100, pipin.vida())  
      assert.equals(50, legolas.vida()) 
    }

    test "Anillo Maldito" {
      const anilloMaldito = new AnilloMaldito(duenio=thorin)
      const armaPoderosaDeThorin = thorin.armaMasPoderosa()
      anilloMaldito.invocarAnillo()
      assert.notThat(thorin.armas().contains(armaPoderosaDeThorin))
    }

    test "Anillo de Aire" {
      const anilloDeAire = new AnilloDeAire(duenio=thorin,mejorAmigo=legolas)
      anilloDeAire.invocarAnillo()
      assert.equals(100, legolas.vida())  
    }

    test "Anillo Unico con muchas armas" {
      gollum.armas([baculo,new Daga(magiaQueRige=magiaElfica,multiplicadorDePoder=10),new Daga(magiaQueRige=magiaElfica,multiplicadorDePoder=5),new Espada(magiaQueRige=magiaElfica,multiplicadorDePoder=10)])
      anilloUnico.invocarAnillo()
      assert.equals(80, gollum.vida())
    }

    test "Un guerrero invoca un anillo unico, teniendo pocas armas" {
      anilloUnico.invocarAnillo() 
      anilloUnico.invocarAnillo() 
      assert.equals(70, gollum.vida()) 
    }
 }